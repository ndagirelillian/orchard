import csv
from datetime import datetime, timedelta, time
from django.http import HttpResponse
from django.utils import timezone
from django.contrib.auth.decorators import login_required
from inventory.models import OrderTransaction, OrderItem
from pytz import timezone as pytz_timezone

from room_bookings.models import RoomReservation


@login_required(login_url='/user/login/')
def export_orders_to_csv(request, time_period='daily'):
    # Set timezone
    local_tz = pytz_timezone('Africa/Kampala')
    now_local = timezone.now().astimezone(local_tz)
    today_local = now_local.date()

    # Determine time range
    if time_period == 'daily':
        # Business day: 10 AM today to 9:59 AM tomorrow
        start_local = timezone.make_aware(
            datetime.combine(today_local, time(10, 0, 0)), local_tz)
        end_local = timezone.make_aware(datetime.combine(
            today_local + timedelta(days=1), time(9, 59, 0)), local_tz)

        # For filename and heading
        date_str = today_local.strftime('%Y-%m-%d')
        next_day_str = (today_local + timedelta(days=1)).strftime('%Y-%m-%d')
        filename = f'orders_{date_str}_10AM_to_{next_day_str}_9AM.csv'
        heading = f'ORDERS REPORT ({date_str} 10:00AM to {next_day_str} 9:00AM)'

    else:
        today = timezone.localdate()
        if time_period == 'weekly':
            start_date = today - timedelta(days=today.weekday())
            heading = 'WEEKLY ORDERS REPORT'
            filename = 'order_items_this_week.csv'
        elif time_period == 'monthly':
            start_date = today.replace(day=1)
            heading = 'MONTHLY ORDERS REPORT'
            filename = 'order_items_this_month.csv'
        elif time_period == 'biannual':
            start_date = today.replace(
                month=((today.month - 1) // 6) * 6 + 1, day=1)
            heading = 'BIANNUAL ORDERS REPORT'
            filename = 'order_items_this_biannual.csv'
        elif time_period == 'annual':
            start_date = today.replace(month=1, day=1)
            heading = 'ANNUAL ORDERS REPORT'
            filename = 'order_items_this_year.csv'
        else:
            return HttpResponse("Invalid time period", status=400)

        start_local = timezone.make_aware(datetime.combine(
            start_date, datetime.min.time()), local_tz)
        end_local = timezone.make_aware(datetime.combine(
            today + timedelta(days=1), datetime.min.time()), local_tz)

    # Prepare HTTP response
    response = HttpResponse(content_type='text/csv')
    response['Content-Disposition'] = f'attachment; filename="{filename}"'
    writer = csv.writer(response)

    # Report heading
    writer.writerow([f'{heading}'])
    writer.writerow([])  # blank line

    # Column headers
    column_headers = [
        'ORDER DATE', 'ORDER TIME', 'TRANSACTION ID',
        'CATEGORY', 'MENU ITEM', 'QUANTITY',
        'UNIT PRICE', 'TOTAL PRICE', 'PAYMENT MODE',
        'SERVED BY', 'GENERATED BY', 'CUSTOMER NAME'
    ]
    writer.writerow(column_headers)

    # Query data
    order_transactions = OrderTransaction.objects.select_related(
        'dining_area', 'table', 'created_by'
    ).filter(
        created__gte=start_local,
        created__lt=end_local,
        payment_mode__in=["CASH", "MOMO PAY", "BANK CARD", "AIRTEL PAY"]
    )

    total_sum = 0
    record_count = 0

    for order in order_transactions:
        order_items = OrderItem.objects.select_related(
            'menu_item__category').filter(order=order)
        for item in order_items:
            category_name = item.menu_item.category.name if item.menu_item and item.menu_item.category else 'N/A'
            writer.writerow([
                timezone.localtime(item.order_date).strftime('%Y-%m-%d'),
                timezone.localtime(item.order_date).strftime('%H:%M:%S'),
                order.random_id,
                category_name,
                item.menu_item.name if item.menu_item else 'N/A',
                item.quantity,
                float(item.menu_item.price) if item.menu_item else 0,
                float(item.total_price),
                order.payment_mode,
                order.served_by,
                order.created_by.username if order.created_by else 'Unknown',
                order.customer_name,
            ])
            total_sum += float(item.total_price)
            record_count += 1

    # Summary section
    writer.writerow([])
    writer.writerow(['SUMMARY'])
    writer.writerow([f'Total Records: {record_count}'])
    writer.writerow([f'Total Amount: Ugx {total_sum:,.2f}'])

    return response


# Helper to compute start/end datetimes based on time_period
def _get_period_range_reservations(time_period):
    local_tz = pytz_timezone('Africa/Kampala')
    today = timezone.now().astimezone(local_tz).date()

    if time_period == 'daily':
        # Full local day: 00:00 to 23:59:59
        start_date = today
        heading = f"DAILY RESERVATIONS REPORT ({today.strftime('%Y-%m-%d')})"
        filename = f"reservations_{today.strftime('%Y-%m-%d')}.csv"
    elif time_period == 'weekly':
        start_date = today - timedelta(days=today.weekday())
        heading = "WEEKLY RESERVATIONS REPORT"
        filename = "reservations_this_week.csv"
    elif time_period == 'monthly':
        start_date = today.replace(day=1)
        heading = "MONTHLY RESERVATIONS REPORT"
        filename = "reservations_this_month.csv"
    elif time_period == 'biannual':
        start_date = today.replace(month=((today.month - 1)//6)*6 + 1, day=1)
        heading = "BIANNUAL RESERVATIONS REPORT"
        filename = "reservations_this_biannual.csv"
    elif time_period == 'annual':
        start_date = today.replace(month=1, day=1)
        heading = "ANNUAL RESERVATIONS REPORT"
        filename = "reservations_this_year.csv"
    else:
        return None, None, None

    start_of_period = timezone.make_aware(
        datetime.combine(start_date, datetime.min.time()), local_tz
    )
    # End at next day 00:00 (exclusive)
    end_of_period = timezone.make_aware(
        datetime.combine(today + timedelta(days=1),
                         datetime.min.time()), local_tz
    )

    return start_of_period, end_of_period, (filename, heading)


@login_required(login_url='/user/login/')
def export_reservations_to_csv(request, time_period='daily'):
    """
    Export RoomReservation CSV filtered by reservation_date within the given time_period.
    time_period choices: 'daily', 'weekly', 'monthly', 'biannual', 'annual'.
    """
    # Compute date range and filename/heading
    start_of_period, end_of_period, meta = _get_period_range_reservations(
        time_period)
    if not start_of_period:
        return HttpResponse("Invalid time period", status=400)

    filename, heading = meta

    # Prepare HTTP response
    response = HttpResponse(content_type='text/csv')
    response['Content-Disposition'] = f'attachment; filename="{filename}"'
    writer = csv.writer(response)

    # Heading row
    writer.writerow([heading])
    writer.writerow([])

    # Column headers
    writer.writerow([
        'Reservation ID',
        'Room Number',
        'Customer Name',
        'Email',
        'Phone Number',
        'NIN',
        'Check-In Date',
        'Check-Out Date',
        'Total Nights',
        'Reservation Date',
        'Status',
        'Total Price (Ugx)',
        'Created By'
    ])

    # Initialize running totals
    total_reservations = 0
    grand_total_revenue = 0

    # Query reservations in range
    reservations = RoomReservation.objects.select_related('room', 'created_by') \
        .filter(
            reservation_date__gte=start_of_period,
            reservation_date__lt=end_of_period
    )

    for res in reservations:
        total_nights = res.total_nights
        total_price = res.total_price or 0
        created_by_username = res.created_by.username if res.created_by else 'Unknown'

        writer.writerow([
            res.reservation_id,
            res.room.room_number if res.room else 'N/A',
            res.customer or 'Guest',
            res.email or '',
            res.phone_number or '',
            res.NIN or '',
            res.check_in_date.strftime('%Y-%m-%d'),
            res.check_out_date.strftime('%Y-%m-%d'),
            total_nights,
            res.reservation_date.astimezone(pytz_timezone(
                'Africa/Kampala')).strftime('%Y-%m-%d %H:%M:%S'),
            res.status,
            f"{total_price:.2f}",
            created_by_username
        ])

        total_reservations += 1
        grand_total_revenue += float(total_price)

    # Blank row before summary
    writer.writerow([])
    writer.writerow(['SUMMARY'])
    writer.writerow([f'Total Reservations: {total_reservations}'])
    writer.writerow([f'Total Revenue (Ugx): {grand_total_revenue:,.2f}'])

    return response
